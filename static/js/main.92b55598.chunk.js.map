{"version":3,"sources":["services/spellCheckerApi.js","services/getWordArray.js","hooks/useTypingTest.js","components/Header.js","components/Settings.js","components/ProofedText.js","components/TypingTest.js","components/Button.js","services/getTypingLevel.js","components/Result.js","App.js","reportWebVitals.js","index.js"],"names":["spellCheckerApi","text","language","options","method","url","headers","process","data","fieldvalues","config","forceUpperCase","ignoreIrregularCaps","ignoreFirstCaps","ignoreNumbers","ignoreUpper","ignoreDouble","ignoreWordsWithNumbers","axios","request","then","response","catch","error","getWordArray","trim","split","filter","word","test","useTypingText","initLanguage","initTime","useState","time","settings","setSettings","timeLeft","setTimeRemaining","spellingErrors","setSpellingErrors","numWords","setNumWords","setErrorMsg","isTestRunning","setIsTestRunning","hasResult","setHasResult","hasTextProofed","setHasTextProofed","textAreaRef","useRef","timerRef","numValidWords","length","wpm","Math","floor","resetTest","current","value","a","checkSpelling","status","spellingErrorCount","elements","errors","map","useEffect","setTimeout","stopTest","updateSettings","e","clearTimeout","target","name","startTest","disabled","focus","Header","className","Settings","languageOptions","enUS","frFR","esES","itIT","deDE","Object","keys","lgCode","onChange","type","checked","sec","Number","ProofreadedText","proofedWords","index","includes","TypingTest","isDisabled","num","ref","Button","onClick","getTypingLevel","limit","msg","Infinity","find","level","Result","errorMsg","toUpperCase","App","navigator","userLanguage","replace","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92b55598.chunk.js","sourcesContent":["import axios from \"axios\"\n\nexport default function spellCheckerApi(text, language) {\n  const options = {\n    method: \"POST\",\n    url: \"https://jspell-checker.p.rapidapi.com/check\",\n    headers: {\n      \"content-type\": \"application/json\",\n      \"x-rapidapi-key\": process.env.REACT_APP_RAPIDAPI_KEY,\n      \"x-rapidapi-host\": \"jspell-checker.p.rapidapi.com\",\n    },\n    data: {\n      language: language,\n      fieldvalues: text,\n      config: {\n        forceUpperCase: false,\n        ignoreIrregularCaps: false,\n        ignoreFirstCaps: true,\n        ignoreNumbers: true,\n        ignoreUpper: true,\n        ignoreDouble: false,\n        ignoreWordsWithNumbers: true,\n      },\n    },\n  }\n\n  return axios\n    .request(options)\n    .then(function (response) {\n      return response\n    })\n    .catch(function (error) {\n      return error.response\n    })\n}\n","export default function getWordArray(text) {\n  const words = text.trim().split(\" \")\n  return words.filter((word) => /[a-zA-Z]/.test(word))\n}\n","import { useState, useEffect, useRef } from \"react\"\nimport checkSpelling from \"../services/spellCheckerApi\"\nimport getWordArray from \"../services/getWordArray\"\n\nexport default function useTypingText(initLanguage, initTime) {\n  const [settings, setSettings] = useState({\n    time: initTime,\n    language: initLanguage,\n  })\n\n  const [timeLeft, setTimeRemaining] = useState(initTime)\n  const [spellingErrors, setSpellingErrors] = useState([])\n  const [numWords, setNumWords] = useState(0)\n  const [error, setErrorMsg] = useState(null)\n  const [isTestRunning, setIsTestRunning] = useState(false)\n  const [hasResult, setHasResult] = useState(false)\n  const [hasTextProofed, setHasTextProofed] = useState(false)\n  const textAreaRef = useRef(null)\n  const timerRef = useRef(null)\n\n  const numValidWords = numWords - spellingErrors.length > 0 ? numWords - spellingErrors.length : 0\n  const wpm = Math.floor((60 / settings.time) * numValidWords)\n\n  useEffect(() => {\n    resetTest()\n  }, [settings]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (isTestRunning && timeLeft > 0) {\n      timerRef.current = setTimeout(() => {\n        setTimeRemaining((time) => time - 1)\n      }, 1000)\n    } else if (isTestRunning && timeLeft === 0) {\n      stopTest()\n    }\n  }, [timeLeft, isTestRunning]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  function resetTest() {\n    setTimeRemaining(settings.time)\n    setHasResult(false)\n    setNumWords(0)\n    setSpellingErrors([])\n    setHasTextProofed(false)\n    setErrorMsg(null)\n    textAreaRef.current.value = \"\"\n  }\n\n  function startTest() {\n    resetTest()\n    setIsTestRunning(true)\n    textAreaRef.current.disabled = false\n    textAreaRef.current.focus()\n  }\n\n  async function stopTest() {\n    setIsTestRunning(false)\n    if (!textAreaRef.current.value) {\n      setErrorMsg(\"No text provided\")\n      return\n    }\n    const { status, data } = await checkSpelling(textAreaRef.current.value, settings.language)\n    if (status === 200) {\n      if (data.spellingErrorCount) {\n        setSpellingErrors(data.elements[0].errors.map((error) => error.word))\n      }\n      setNumWords(getWordArray(textAreaRef.current.value).length)\n      setHasTextProofed(true)\n      setHasResult(true)\n    } else {\n      setErrorMsg(\"Not available\")\n      setHasResult(true)\n    }\n  }\n\n  function updateSettings(e) {\n    if (isTestRunning) {\n      clearTimeout(timerRef.current)\n      setIsTestRunning(false)\n    }\n    setSettings({ ...settings, [e.target.name]: e.target.value })\n  }\n\n  return {\n    timeLeft,\n    numValidWords,\n    numWords,\n    wpm,\n    error,\n    isTestRunning,\n    hasTextProofed,\n    hasResult,\n    spellingErrors,\n    settings,\n    textAreaRef,\n    updateSettings,\n    startTest,\n  }\n}\n","export default function Header() {\n  return (\n    <header className=\"header\">\n      <h1>Typing Speed Test</h1>\n      <p>How fast can you type?</p>\n    </header>\n  )\n}\n","export default function Settings({ settings, updateSettings }) {\n  const languageOptions = {\n    enUS: \"english\",\n    frFR: \"french\",\n    esES: \"spanish\",\n    itIT: \"italian\",\n    deDE: \"german\",\n  }\n  const timeOptions = [60, 120, 180, 300, 600]\n\n  return (\n    <div>\n      <p>\n        {Object.keys(languageOptions).map((lgCode) => (\n          <label key={lgCode}>\n            <input\n              onChange={(e) => updateSettings(e)}\n              type=\"radio\"\n              name=\"language\"\n              value={lgCode}\n              checked={settings.language === lgCode}\n            />\n            {languageOptions[lgCode]}\n          </label>\n        ))}\n      </p>\n\n      <p>\n        {timeOptions.map((sec) => {\n          return (\n            <label key={sec}>\n              <input\n                onChange={(e) => updateSettings(e)}\n                type=\"radio\"\n                name=\"time\"\n                value={sec}\n                checked={Number(settings.time) === sec}\n              />\n              {sec / 60} min{\" \"}\n            </label>\n          )\n        })}\n      </p>\n    </div>\n  )\n}\n","import getWordArray from \"../services/getWordArray\"\n\nexport default function ProofreadedText({ text, errors }) {\n  const words = getWordArray(text)\n  const proofedWords = words.map((word, index) => {\n    return (\n      <span key={index} className={errors.includes(word) ? \"error\" : \"correct\"}>\n        {word}{\" \"}\n      </span>\n    )\n  })\n  return <div>{proofedWords}</div>\n}\n","export default function TypingTest({ textAreaRef, isDisabled, num }) {\n  return (\n    <div className=\"TypingTest\">\n      <textarea ref={textAreaRef} disabled={isDisabled} />\n      <div className=\"counter\">{num} sec</div>\n    </div>\n  )\n}\n","export default function Button({ text, onClick, disabled }) {\n  return (\n    <button onClick={onClick} disabled={disabled}>\n      {text}\n    </button>\n  )\n}\n","export default function getTypingLevel(wpm) {\n  const levels = [\n    { limit: 15, msg: \"super slow 🐌\" },\n    { limit: 25, msg: \"slow 🐢\" },\n    { limit: 35, msg: \"under average 🌱\" },\n    { limit: 45, msg: \"average ⭐️\" },\n    { limit: 55, msg: \"over average ⭐️⭐️\" },\n    { limit: 65, msg: \"fast ⭐️⭐️⭐️\" },\n    { limit: 85, msg: \"amazing fast ⭐️⭐️⭐️⭐️\" },\n    { limit: Infinity, msg: \"super fast ⭐️⭐️⭐️⭐️⭐️\" },\n  ]\n  return levels.find((level) => level.limit >= wpm).msg\n}\n","import getTypingLevel from \"../services/getTypingLevel\"\n\nexport default function Result({ numWords, numValidWords, spellingErrors, errorMsg, wpm }) {\n  return (\n    <div className=\"result-container\">\n      <h3>Result</h3>\n      <p>\n        <span className=\"result-title\">Words:</span>\n        {numWords}\n      </p>\n      <p>\n        <span className=\"result-title\">Errors:</span>\n        {errorMsg ? { errorMsg } : spellingErrors.length}\n      </p>\n      <p>\n        <span className=\"result-title\">Counted Words:</span>\n        {numValidWords}\n      </p>\n      <p className=\"main-result\">\n        {wpm} wpm - {getTypingLevel(wpm).toUpperCase()}\n      </p>\n    </div>\n  )\n}\n","import \"./App.css\"\nimport useTypingText from \"./hooks/useTypingTest\"\nimport Header from \"./components/Header\"\nimport Settings from \"./components/Settings\"\nimport ProofedText from \"./components/ProofedText\"\nimport TypingTest from \"./components/TypingTest\"\nimport Button from \"./components/Button\"\nimport Result from \"./components/Result\"\n\nexport default function App() {\n  const DEFAULT_LANGUAGE = (navigator.language || navigator.userLanguage).replace(\"-\", \"\")\n  const DEFAULT_TIME = 60\n\n  const {\n    settings,\n    timeLeft,\n    numValidWords,\n    errorMsg,\n    wpm,\n    isTestRunning,\n    hasTextProofed,\n    hasResult,\n    spellingErrors,\n    numWords,\n    textAreaRef,\n    updateSettings,\n    startTest,\n  } = useTypingText(DEFAULT_LANGUAGE, DEFAULT_TIME)\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <main>\n        <Settings settings={settings} updateSettings={updateSettings} />\n        <TypingTest textAreaRef={textAreaRef} isDisabled={!isTestRunning} num={timeLeft} />\n\n        {hasTextProofed && <ProofedText text={textAreaRef.current.value} errors={spellingErrors} />}\n\n        <Button text=\"Start\" onClick={startTest} disabled={isTestRunning} />\n\n        {hasResult && (\n          <Result\n            numWords={numWords}\n            numValidWords={numValidWords}\n            spellingErrors={spellingErrors}\n            errorMsg={errorMsg}\n            wpm={wpm}\n          />\n        )}\n        {!hasResult && errorMsg && <p className=\"error\">{errorMsg}</p>}\n      </main>\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}