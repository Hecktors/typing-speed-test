{"version":3,"sources":["spellCheckerApi.js","App.js","reportWebVitals.js","index.js"],"names":["spellCheckerApi","text","options","method","url","headers","process","data","language","fieldvalues","config","forceUpperCase","ignoreIrregularCaps","ignoreFirstCaps","ignoreNumbers","ignoreUpper","ignoreDouble","ignoreWordsWithNumbers","axios","request","then","response","spellingErrorCount","catch","error","console","App","useState","isFirstRender","setIsFirstRender","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","numWords","setNumWord","numSpellingErrors","setNumSpellingErrors","textAreaRef","useRef","countWords","trim","split","filter","word","test","length","a","checkSpelling","current","value","useEffect","setTimeout","time","stopTest","className","ref","disabled","onClick","focus","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAEe,SAASA,EAAgBC,GACtC,IAAMC,EAAU,CACdC,OAAQ,OACRC,IAAK,8CACLC,QAAS,CACP,eAAgB,mBAChB,iBAAkBC,qDAClB,kBAAmB,iCAErBC,KAAM,CACJC,SAAU,OACVC,YAAaR,EACbS,OAAQ,CACNC,gBAAgB,EAChBC,qBAAqB,EACrBC,iBAAiB,EACjBC,eAAe,EACfC,aAAa,EACbC,cAAc,EACdC,wBAAwB,KAK9B,OAAOC,IACJC,QAAQjB,GACRkB,MAAK,SAAUC,GACd,OAAOA,EAASd,KAAKe,sBAEtBC,OAAM,SAAUC,GACfC,QAAQD,MAAMA,M,WC5BL,SAASE,IACtB,IAD4B,EAGcC,oBAAS,GAHvB,mBAGrBC,EAHqB,KAGNC,EAHM,OAIcF,mBAHrB,GADO,mBAIrBG,EAJqB,KAINC,EAJM,OAKcJ,oBAAS,GALvB,mBAKrBK,EALqB,KAKNC,EALM,OAMGN,mBAAS,GANZ,mBAMrBO,EANqB,KAMXC,EANW,OAOsBR,mBAAS,GAP/B,mBAOrBS,EAPqB,KAOFC,EAPE,KAQtBC,EAAcC,iBAAO,MAE3B,SAASC,EAAWvC,GAElB,OADcA,EAAKwC,OAAOC,MAAM,KACnBC,QAAO,SAACC,GAAD,MAAU,WAAWC,KAAKD,MAAOE,OAZ3B,4CAyB5B,sBAAAC,EAAA,6DACEd,GAAiB,GADnB,KAEEI,EAFF,SAE6BW,EAAcV,EAAYW,QAAQC,OAF/D,kCAGEf,EAAWK,EAAWF,EAAYW,QAAQC,QAH5C,4CAzB4B,sBA0C5B,OAXAC,qBAAU,WACJnB,GAAiBF,EAAgB,GACnCD,GAAiB,GACjBuB,YAAW,WACTrB,GAAiB,SAACsB,GAAD,OAAUA,EAAO,OACjC,MACwB,IAAlBvB,GArCe,mCAsCxBwB,KAED,CAACxB,EAAeE,IAGjB,sBAAKuB,UAAU,MAAf,UACE,yBAAQA,UAAU,SAAlB,UACE,mDACA,0DAEF,iCACE,sBAAKA,UAAU,mBAAf,UACE,0BAAUC,IAAKlB,EAAamB,UAAWzB,IACvC,qBAAKuB,UAAU,UAAf,SAA0BzB,OAE5B,wBAAQ4B,QAtCd,WACE3B,EAfmB,GAgBnBE,GAAiB,GACjBE,EAAW,GACXE,EAAqB,GACrBC,EAAYW,QAAQC,MAAQ,GAC5BZ,EAAYW,QAAQQ,UAAW,EAC/BnB,EAAYW,QAAQU,SA+BYF,SAAUzB,EAAtC,mBAGA,4BAAKJ,GAAkBI,EAA4C,GAA5B,eAAiBE,IACxD,4BAAKN,GAAkBI,EAA0D,GAA1C,oBAAsBI,IAC7D,4BAAKR,GAAkBI,EAA8D,GAA9C,YAAcE,EAAWE,WC9DxE,IAYewB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1C,MAAK,YAAkD,IAA/C2C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1cbb9cf2.chunk.js","sourcesContent":["import axios from \"axios\"\n\nexport default function spellCheckerApi(text) {\n  const options = {\n    method: \"POST\",\n    url: \"https://jspell-checker.p.rapidapi.com/check\",\n    headers: {\n      \"content-type\": \"application/json\",\n      \"x-rapidapi-key\": process.env.REACT_APP_RAPIDAPI_KEY,\n      \"x-rapidapi-host\": \"jspell-checker.p.rapidapi.com\",\n    },\n    data: {\n      language: \"enUS\",\n      fieldvalues: text,\n      config: {\n        forceUpperCase: false,\n        ignoreIrregularCaps: false,\n        ignoreFirstCaps: true,\n        ignoreNumbers: true,\n        ignoreUpper: false,\n        ignoreDouble: false,\n        ignoreWordsWithNumbers: true,\n      },\n    },\n  }\n\n  return axios\n    .request(options)\n    .then(function (response) {\n      return response.data.spellingErrorCount\n    })\n    .catch(function (error) {\n      console.error(error)\n    })\n}\n","import { useState, useEffect, useRef } from \"react\"\nimport \"./App.css\"\nimport checkSpelling from \"./spellCheckerApi\"\n\nexport default function App() {\n  const DEFAULT_TIME = 5\n\n  const [isFirstRender, setIsFirstRender] = useState(true)\n  const [timeRemaining, setTimeRemaining] = useState(DEFAULT_TIME)\n  const [isTimeRunning, setIsTimeRunning] = useState(false)\n  const [numWords, setNumWord] = useState(0)\n  const [numSpellingErrors, setNumSpellingErrors] = useState(0)\n  const textAreaRef = useRef(null)\n\n  function countWords(text) {\n    const words = text.trim().split(\" \")\n    return words.filter((word) => /[a-zA-Z]/.test(word)).length\n  }\n\n  function startTest() {\n    setTimeRemaining(DEFAULT_TIME)\n    setIsTimeRunning(true)\n    setNumWord(0)\n    setNumSpellingErrors(0)\n    textAreaRef.current.value = \"\"\n    textAreaRef.current.disabled = false\n    textAreaRef.current.focus()\n  }\n\n  async function stopTest() {\n    setIsTimeRunning(false)\n    setNumSpellingErrors(await checkSpelling(textAreaRef.current.value))\n    setNumWord(countWords(textAreaRef.current.value))\n  }\n\n  useEffect(() => {\n    if (isTimeRunning && timeRemaining > 0) {\n      setIsFirstRender(false)\n      setTimeout(() => {\n        setTimeRemaining((time) => time - 1)\n      }, 1000)\n    } else if (timeRemaining === 0) {\n      stopTest()\n    }\n  }, [timeRemaining, isTimeRunning]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1>Typing Speed Test</h1>\n        <p>How fast can you type?</p>\n      </header>\n      <main>\n        <div className=\"textBoxContainer\">\n          <textarea ref={textAreaRef} disabled={!isTimeRunning} />\n          <div className=\"counter\">{timeRemaining}</div>\n        </div>\n        <button onClick={startTest} disabled={isTimeRunning}>\n          Start\n        </button>\n        <p>{!isFirstRender && !isTimeRunning ? \"Word count: \" + numWords : \"\"}</p>\n        <p>{!isFirstRender && !isTimeRunning ? \"Spelling Errors: \" + numSpellingErrors : \"\"}</p>\n        <p>{!isFirstRender && !isTimeRunning ? \"Result: \" + (numWords - numSpellingErrors) : \"\"}</p>\n      </main>\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}