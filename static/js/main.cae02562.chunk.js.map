{"version":3,"sources":["services/getWordArray.js","components/ProofedText.js","services/spellCheckerApi.js","App.js","hooks/useTypingTest.js","reportWebVitals.js","index.js"],"names":["getWordArray","text","trim","split","filter","word","test","ProofreadedText","errors","proofedWords","map","index","className","includes","spellCheckerApi","language","console","log","options","method","url","headers","process","data","fieldvalues","config","forceUpperCase","ignoreIrregularCaps","ignoreFirstCaps","ignoreNumbers","ignoreUpper","ignoreDouble","ignoreWordsWithNumbers","axios","request","then","response","catch","error","App","initTestTime","initLanguage","useState","testTime","setTestTime","setLanguage","timeRemaining","setTimeRemaining","spellingErrors","setSpellingErrors","numWords","setNumWords","apiError","setApiError","isTestRunning","setIsTestRunning","hasResult","setHasResult","hasTextProofed","setHasTextProofed","textAreaRef","useRef","timerRef","validNumWords","length","wmp","Math","floor","resetTest","current","value","stopTest","a","clearTimeout","checkSpelling","status","spellingErrorCount","elements","message","useEffect","setTimeout","time","updateTestTime","e","Number","target","updateLanguage","startTest","disabled","focus","getSpeedLevel","wpm","level","useTypingText","navigator","userLanguage","replace","languageOptions","enUS","frFR","esES","itIT","deDE","Object","keys","lgCode","onChange","type","name","checked","sec","ref","onClick","toUpperCase","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cae02562.chunk.js","sourcesContent":["export default function getWordArray(text) {\n  const words = text.trim().split(\" \")\n  return words.filter((word) => /[a-zA-Z]/.test(word))\n}\n","import getWordArray from \"../services/getWordArray\"\n\nexport default function ProofreadedText({ text, errors }) {\n  const words = getWordArray(text)\n  const proofedWords = words.map((word, index) => {\n    return (\n      <span key={index} className={errors.includes(word) ? \"error\" : \"correct\"}>\n        {word}{\" \"}\n      </span>\n    )\n  })\n  return <div>{proofedWords}</div>\n}\n","import axios from \"axios\"\n\nexport default function spellCheckerApi(text, language) {\n  console.log(text, language)\n  const options = {\n    method: \"POST\",\n    url: \"https://jspell-checker.p.rapidapi.com/check\",\n    headers: {\n      \"content-type\": \"application/json\",\n      \"x-rapidapi-key\": process.env.REACT_APP_RAPIDAPI_KEY,\n      \"x-rapidapi-host\": \"jspell-checker.p.rapidapi.com\",\n    },\n    data: {\n      language: language,\n      fieldvalues: text,\n      config: {\n        forceUpperCase: false,\n        ignoreIrregularCaps: false,\n        ignoreFirstCaps: true,\n        ignoreNumbers: true,\n        ignoreUpper: true,\n        ignoreDouble: false,\n        ignoreWordsWithNumbers: true,\n      },\n    },\n  }\n\n  return axios\n    .request(options)\n    .then(function (response) {\n      return response\n    })\n    .catch(function (error) {\n      return error.response\n    })\n}\n","import \"./App.css\"\n\nimport ProofedText from \"./components/ProofedText\"\nimport useTypingText from \"./hooks/useTypingTest\"\n\nexport default function App() {\n  const DEFAULT_LANGUAGE = (navigator.language || navigator.userLanguage).replace(\"-\", \"\")\n  const DEFAULT_TIME = 60\n\n  const {\n    language,\n    testTime,\n    timeRemaining,\n    validNumWords,\n    apiError,\n    wmp,\n    isTestRunning,\n    hasTextProofed,\n    hasResult,\n    spellingErrors,\n    numWords,\n    textAreaRef,\n    updateTestTime,\n    updateLanguage,\n    startTest,\n    getSpeedLevel,\n  } = useTypingText(DEFAULT_TIME, DEFAULT_LANGUAGE)\n\n  const languageOptions = {\n    enUS: \"english\",\n    frFR: \"french\",\n    esES: \"spanish\",\n    itIT: \"italian\",\n    deDE: \"german\",\n  }\n\n  const timeOptions = [60, 120, 180, 300, 600]\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1>Typing Speed Test</h1>\n        <p>How fast can you type?</p>\n      </header>\n\n      <main>\n        <p>\n          {Object.keys(languageOptions).map((lgCode) => (\n            <label key={lgCode}>\n              <input\n                onChange={updateLanguage}\n                type=\"radio\"\n                name=\"language\"\n                value={lgCode}\n                checked={language === lgCode}\n              />\n              {languageOptions[lgCode]}\n            </label>\n          ))}\n        </p>\n\n        <p>\n          {timeOptions.map((sec) => {\n            return (\n              <label key={sec}>\n                <input\n                  onChange={updateTestTime}\n                  type=\"radio\"\n                  name=\"minute\"\n                  value={sec}\n                  checked={testTime === sec}\n                />\n                {sec / 60} min{\" \"}\n              </label>\n            )\n          })}\n        </p>\n\n        <div className=\"textBoxContainer\">\n          <textarea ref={textAreaRef} disabled={!isTestRunning} />\n          <div className=\"counter\">{timeRemaining} sec</div>\n        </div>\n\n        {hasTextProofed && <ProofedText text={textAreaRef.current.value} errors={spellingErrors} />}\n\n        <button onClick={startTest} disabled={isTestRunning}>\n          Start\n        </button>\n\n        {hasResult && (\n          <div className=\"result-container\">\n            <h3>Result</h3>\n            <p>\n              <span className=\"result-title\">Words:</span>\n              {numWords}\n            </p>\n            <p>\n              <span className=\"result-title\">Errors:</span>\n              {apiError ? \"Not available\" : spellingErrors.length}\n            </p>\n            <p>\n              <span className=\"result-title\">Counted Words:</span>\n              {validNumWords}\n            </p>\n            <p className=\"main-result\">\n              {wmp}wpm - {getSpeedLevel(wmp).toUpperCase()}\n            </p>\n          </div>\n        )}\n        {!hasResult && apiError && <p className=\"error\">{apiError}</p>}\n      </main>\n    </div>\n  )\n}\n","import { useState, useEffect, useRef } from \"react\"\nimport checkSpelling from \"../services/spellCheckerApi\"\nimport getWordArray from \"../services/getWordArray\"\n\nexport default function useTypingText(initTestTime, initLanguage) {\n  function getSpeedLevel(wpm) {\n    let level = \"\"\n    switch (true) {\n      case wpm <= 15:\n        level = \"super slow 🐌\"\n        break\n      case wpm <= 25:\n        level = \"slow 🐢\"\n        break\n      case wpm <= 35:\n        level = \"under average 🌱\"\n        break\n      case wpm <= 45:\n        level = \"average ⭐️\"\n        break\n      case wpm <= 55:\n        level = \"over average ⭐️⭐️\"\n        break\n      case wpm <= 65:\n        level = \"fast ⭐️⭐️⭐️\"\n        break\n      case wpm <= 80:\n        level = \"amazing fast ⭐️⭐️⭐️⭐️\"\n        break\n      case wpm > 80:\n        level = \"super fast ⭐️⭐️⭐️⭐️⭐️\"\n        break\n      default:\n        break\n    }\n    return level\n  }\n\n  const [testTime, setTestTime] = useState(initTestTime)\n  const [language, setLanguage] = useState(initLanguage)\n  const [timeRemaining, setTimeRemaining] = useState(initTestTime)\n  const [spellingErrors, setSpellingErrors] = useState([])\n  const [numWords, setNumWords] = useState(0)\n  const [apiError, setApiError] = useState(null)\n  const [isTestRunning, setIsTestRunning] = useState(false)\n  const [hasResult, setHasResult] = useState(false)\n  const [hasTextProofed, setHasTextProofed] = useState(false)\n  const textAreaRef = useRef(null)\n  const timerRef = useRef(null)\n\n  let validNumWords = numWords - spellingErrors.length > 0 ? numWords - spellingErrors.length : 0\n  const wmp = Math.floor((60 / testTime) * validNumWords)\n\n  useEffect(() => {\n    if (isTestRunning && timeRemaining > 0) {\n      timerRef.current = setTimeout(() => {\n        setTimeRemaining((time) => time - 1)\n      }, 1000)\n    } else if (isTestRunning && timeRemaining === 0) {\n      stopTest()\n    }\n  }, [timeRemaining, isTestRunning]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  function resetTest() {\n    setTimeRemaining(testTime)\n    setHasResult(false)\n    setNumWords(0)\n    setSpellingErrors([])\n    setHasTextProofed(false)\n    setApiError(null)\n    textAreaRef.current.value = \"\"\n  }\n\n  function startTest() {\n    resetTest()\n    setIsTestRunning(true)\n    textAreaRef.current.disabled = false\n    textAreaRef.current.focus()\n  }\n\n  async function stopTest() {\n    clearTimeout(timerRef.current)\n    setIsTestRunning(false)\n    if (!timeRemaining) {\n      if (!textAreaRef.current.value) {\n        setApiError(\"No text provided\")\n        return\n      }\n      const { status, data } = await checkSpelling(textAreaRef.current.value, language)\n      if (status === 200) {\n        if (data.spellingErrorCount) {\n          setSpellingErrors(data.elements[0].errors.map((error) => error.word))\n        }\n        setNumWords(getWordArray(textAreaRef.current.value).length)\n        setHasTextProofed(true)\n        setHasResult(true)\n      } else {\n        setApiError(data.message)\n        setHasResult(true)\n      }\n    } else {\n      resetTest()\n    }\n  }\n\n  function updateTestTime(e) {\n    setTestTime(Number(e.target.value))\n    isTestRunning && stopTest()\n  }\n\n  function updateLanguage(e) {\n    setLanguage(e.target.value)\n    isTestRunning && stopTest()\n  }\n\n  return {\n    language,\n    testTime,\n    timeRemaining,\n    validNumWords,\n    apiError,\n    wmp,\n    isTestRunning,\n    hasTextProofed,\n    hasResult,\n    spellingErrors,\n    numWords,\n    textAreaRef,\n    updateTestTime,\n    updateLanguage,\n    startTest,\n    getSpeedLevel,\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}